AWSTemplateFormatVersion: '2010-09-09'
Description: "`Plasma` dashboard, for tracking down unattached atoms"
Parameters:
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: plasmadash
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: multimedia
  Stage:
    Type: String
    AllowedValues:
      - CODE
      - DEV
      - PROD
    Description: Deployment stage
  AmiId:
    Type: String
    Description: ID of the base image to build instances from.  Build this with Amigo.
  OfficeIpRange:
    Type: String
    Description: CIDR block of ip addresses to be allowed SSH access
  InstanceType:
    Type: String
    Description: What type of instance to launch
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.small
    Default: t3.nano
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Root access keypair
  VPCID:
    Description: Virtual Private Cloud to deploy into
    Type: AWS::EC2::VPC::Id
  DeploySubnets:
    Description: Subnets to deploy into.  These should be the same as where the database lives.
    Type: List<AWS::EC2::Subnet::Id>
  AtomToolDomain:
    Description: Hostname to contact the Media Atom Tool
    Type: String
  AtomToolSharedSecret:
    Description: Shared secret for communicating with the Media Atom Tool
    Type: String
    NoEcho: true
  LoadBalancerCert:
    Description: ARN of an SSL certificate to allow https access to loadbalancer
    Type: String
  #FIXME: replace this with a reference to the deployed launch detector stack
  UnattachedAtomsTable:
    Description: ARN of Dynamo table to look at
    Type: String
  UnattachedAtomsTableName:
    Description: Name of the Dynamo table to look at
    Type: String
  AppSecretString:
    Description: Long random string used as an app secret to secure cookies etc.
    Type: String
    NoEcho: True

Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load-balancer security group for launchdetector
      SecurityGroupIngress:
        - CidrIp: !Ref OfficeIpRange
          FromPort: 9000
          ToPort: 9000
          IpProtocol: tcp
        - CidrIp: !Ref OfficeIpRange
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      VpcId: !Ref VPCID
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: "3"
        Interval: "10"
        Target: "HTTP:9000/is-online"
        Timeout: "3"
        UnhealthyThreshold: "2"
      Listeners:
        - InstancePort: "9000"
          InstanceProtocol: "http"
          LoadBalancerPort: "443"
          Protocol: "https"
          SSLCertificateId: !Ref LoadBalancerCert
      Scheme: internal
      SecurityGroups:
      - !GetAtt LoadBalancerSG.GroupId
      Subnets: !Ref DeploySubnets
      Tags:
      - Key: App
        Value: !Ref App
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: DataAccess
        PolicyDocument:
           Version: 2012-10-17
           Statement:
             Effect: Allow
             Action:
             - dynamodb:DescribeTable
             - dynamodb:GetItem
             - dynamodb:GetRecords
             - dynamodb:Query
             - dynamodb:Scan
             Resource:
             - !Ref UnattachedAtomsTable
             - !Sub ${UnattachedAtomsTable}/index/*
      - PolicyName: DeployablesAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
             - s3:ListBucket
             - s3:GetObject
            Resource:
            - arn:aws:s3:::gnm-multimedia-rr-deployables
            - arn:aws:s3:::gnm-multimedia-rr-deployables/*
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group for launchdetector
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
          FromPort: 9000
          ToPort: 9000
          IpProtocol: tcp
        - CidrIp: !Ref OfficeIpRange
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash -e

          mkdir -p /tmp/install
          aws s3 sync s3://gnm-multimedia-rr-deployables/${Stack}/${Stage}/${App} /tmp/install

          declare -x MOST_RECENT_PACKAGE=`ls -Frt /tmp/install/*.deb | grep "[^/]$" | tail -n 1`
          echo Going to install $MOST_RECENT_PACKAGE
          dpkg --install "${!MOST_RECENT_PACKAGE}"

          mkdir -p /usr/share/mmplasmadash/conf
          chown mmplasmadash /usr/share/mmplasmadash

          cat > /usr/share/mmplasmadash/conf/application.conf << EOF
          play.http.secret.key = "${AppSecretString}"
          play.filters {
            hosts {
              allowed = [".${AWS::Region}.elb.amazonaws.com","localhost:9000"]
            }

            # Disabled filters remove elements from the enabled list.
            disabled += play.filters.headers.SecurityHeadersFilter
            disabled += play.filters.hosts.AllowedHostsFilter
          //  disabled += play.filters.csrf.CSRFFilter
          }
          UnattachedAtomsTable = ${UnattachedAtomsTableName}
          AtomToolDomain = ${AtomToolDomain}
          AtomToolSharedSecret = ${AtomToolSharedSecret}
          region = ${AWS::Region}
          EOF

          cat > /etc/default/mmplasmadash << EOF
          #exiting on out of memory error should cause either systemd or autoscaling group to restart us
          JAVA_OPTS="-XX:+ExitOnOutOfMemoryError -Dconfig.file=/usr/share/mmplasmadash/conf/application.conf"
          EOF

          systemctl restart mmplasmadash
          systemctl enable mmplasmadash
  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      LoadBalancerNames:
      - !Ref LoadBalancer
      MaxSize: "8"
      MinSize: "1"
      Tags:
      - Key: App
        Value: !Ref App
        PropagateAtLaunch: true
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref DeploySubnets
Outputs:
  LoadBalancerAddress:
    Value: !GetAtt LoadBalancer.DNSName
